import{_ as t,c as o,o as a,ag as r}from"./chunks/framework.S-Qvb3wi.js";const m=JSON.parse('{"title":"FAQ","description":"","frontmatter":{},"headers":[],"relativePath":"IntelBluetoothFirmware/FAQ.md","filePath":"IntelBluetoothFirmware/FAQ.md"}'),n={name:"IntelBluetoothFirmware/FAQ.md"};function l(i,e,s,h,d,c){return a(),o("div",null,e[0]||(e[0]=[r('<h1 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h1><h2 id="what-does-this-kext-do" tabindex="-1">What does this Kext do <a class="header-anchor" href="#what-does-this-kext-do" aria-label="Permalink to &quot;What does this Kext do&quot;">​</a></h2><p>Non of the Kexts from this project implement any part of the Bluetooth Stack, hence they are <em><strong>not</strong></em> considered as drivers. They do <em><strong>not</strong></em> handle HCI commands, device pairing, and any feature other than uploading the firmware and preparing the device. The core part of Bluetooth is handled by Apple&#39;s drivers which only provides limited compatibility.</p><h3 id="intelbluetoothfirmware" tabindex="-1">IntelBluetoothFirmware <a class="header-anchor" href="#intelbluetoothfirmware" aria-label="Permalink to &quot;IntelBluetoothFirmware&quot;">​</a></h3><ul><li><p>Uploads Firmware to the device</p></li><li><p>Sets the device&#39;s USB Host Controller name to <code>Bluetooth USB Host Controller</code> on Monterey and newer to bypass <code>board-id</code> check in <code>bluetoothd</code> and <code>bluetool</code></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>BluetoolFixup.kext</code> also includes a workaround but this is cleaner approach.</p></div></li></ul><h3 id="intelbtpatcher" tabindex="-1">IntelBTPatcher <a class="header-anchor" href="#intelbtpatcher" aria-label="Permalink to &quot;IntelBTPatcher&quot;">​</a></h3><p>This Kext serves two different purposes on different versions of macOS.</p><ul><li>Monterey and newer <ul><li>Workaround for a bug in <code>bluetoothd</code> by initializing the bluetooth module properly before attempting a LE Scan.</li></ul></li><li>Prior to Monterey <ul><li>Workaround for a bug in <code>IOBluetoothHostController</code> that prevents certain Bluetooth 4.X devices from connecting.</li></ul></li></ul><details class="details custom-block"><summary>Technical Details</summary><ul><li><p>Monterey and newer</p><ul><li>Apple forgot to set a random address before starting a LE scan with address type <code>Random</code> which results in the firmware returning <code>Invalid HCI Command Parameters (0x12)</code> (equivalent to OI_STATUS 718 shown in bluetoothd log output). Then <code>bluetoothd</code> crashes immediately.</li><li>Around the time when Intel Bluetooth 5.2 modules released, a check in the firmware was implemented accroding to Bluetooth Core Specs 5.0 and newer to return this error. This check has been backported to newer versions of Bluetooth 5.1 firmware. Before that, firmware for Bluetooth 5.1 and earlier will return success even if the conditions are not satisfied. <blockquote><p>If the scanning parameters&#39; Own_Address_Type parameter is set to 0x01 or 0x03 and the random address for the device has not been initialized, the Controller shall return the error code Invalid HCI Command Parameters (0x12).</p><blockquote><p>BLUETOOTH SPECIFICATION Version 5.0 | Vol 2, Part E | 7.8.11 LE Set Scan Enable Command</p></blockquote></blockquote></li><li>Since all scans and advertisements in macOS Big Sur and earlier use public address instead of private, new versions of firmware with the check implemented work as intended.</li><li>All conclusions have been confirmed by using a modified version of BlueKitchen&#39;s Bluetooth stack running on macOS.</li></ul></li><li><p>Prior to Monterey</p><ul><li>A bug in <code>IOBluetoothHostController</code> mishandles LE Start Encryption which prevents Bluetooth 4.X devices that require encryption from connecting.</li><li>When a device requires encryption, the connection handle does not get stored in the async callback queue properly; the default handle <code>0xffff</code> gets stored instead. When the event returns, the completion handle could not be found and the request fails because of timeout.</li><li>Bluetooth modules produced by neither Broadcom nor CSR all use <code>IOBluetoothHostController</code>.</li><li><code>BroadcomBluetoothHostController</code> inherits <code>IOBluetoothHostController</code> and sends the HCI commands with <code>IOBluetoothHostController::SendRawHCICommand</code> instead of <code>IOBluetoothHostController::SendHCICommand</code>.</li><li>Inside the <code>SendRawHCICommand</code> method, there is a separate branch used to handle the LE Encryption event.</li><li>IntelBTPatcher&#39;s workaround forces the <code>FindQueueRequest</code> method to find the <code>0xffff</code> handle when appropriate.</li><li>This is the only bug that prevents Bluetooth 5.X modules from connecting to Bluetooth 4.X devices that require encryption.</li><li>There are possibly more bugs in the stack that prevents Bluetooth 4.X modules from connecting to Bluetooth 4.X devices, requires further investigation.</li></ul></li></ul></details><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Fixes for Continuity features and other issues are not planned.</p></div><h3 id="intelbluetoothinjector" tabindex="-1">IntelBluetoothInjector <a class="header-anchor" href="#intelbluetoothinjector" aria-label="Permalink to &quot;IntelBluetoothInjector&quot;">​</a></h3><p>Do <em><strong>NOT</strong></em> use this Kext on macOS Monterey and newer</p><p>Codeless Kext that enables the on-off switch on older versions of macOS.</p><h2 id="what-additional-steps-should-i-do-to-make-bluetooth-work-on-macos-monterey-and-newer" tabindex="-1">What additional steps should I do to make Bluetooth work on macOS Monterey and newer <a class="header-anchor" href="#what-additional-steps-should-i-do-to-make-bluetooth-work-on-macos-monterey-and-newer" aria-label="Permalink to &quot;What additional steps should I do to make Bluetooth work on macOS Monterey and newer&quot;">​</a></h2><ol><li>Install <code>IntelBTPatcher.kext</code> (Depends on Lilu <strong>v1.6.2</strong> or newer)</li><li>Make sure <code>IntelBluetoothFirmware.kext</code> <strong>v2.2.0</strong> or newer is used.</li><li><em><strong>Remove/Exclude</strong></em> <code>IntelBluetoothInjector.kext</code> for macOS Monterey and newer from the Bootloader&#39;s config</li><li>Install <code>BlueToolFixup.kext</code> from <a href="https://github.com/acidanthera/BrcmPatchRAM" target="_blank" rel="noreferrer">acidanthera/BrcmPatchRAM</a></li></ol><h2 id="will-there-be-any-fixes-for-bluetooth-4-x-compatibility" tabindex="-1">Will there be any fixes for Bluetooth 4.X compatibility <a class="header-anchor" href="#will-there-be-any-fixes-for-bluetooth-4-x-compatibility" aria-label="Permalink to &quot;Will there be any fixes for Bluetooth 4.X compatibility&quot;">​</a></h2><h3 id="monterey-and-newer" tabindex="-1">Monterey and Newer <a class="header-anchor" href="#monterey-and-newer" aria-label="Permalink to &quot;Monterey and Newer&quot;">​</a></h3><p>Apple rewrote the entire Bluetooth Driver for macOS Monterey which now delivers better compatibility with Bluetooth 4.X devices for all Intel Bluetooth modules.</p><h3 id="prior-to-monterey" tabindex="-1">Prior to Monterey <a class="header-anchor" href="#prior-to-monterey" aria-label="Permalink to &quot;Prior to Monterey&quot;">​</a></h3><p>With <code>IntelBTPatcher.kext</code> installed, Bluetooth modules that support Bluetooth 5.X should now be able to connect to Bluetooth 4.X devices.</p><p>Bluetooth modules that only support up to Bluetooth 4.X are still unable to connect to other Bluetooth 4.X devices.</p><h2 id="why-can-t-macos-bluetooth-connect-to-iphone-or-ipad" tabindex="-1">Why can&#39;t macOS Bluetooth connect to iPhone or iPad <a class="header-anchor" href="#why-can-t-macos-bluetooth-connect-to-iphone-or-ipad" aria-label="Permalink to &quot;Why can&#39;t macOS Bluetooth connect to iPhone or iPad&quot;">​</a></h2><p>Ask Apple, the same behavior occurs on real Macs as well.</p><p>Try something else if you are testing your device.</p><h2 id="is-the-solution-meant-to-replace-native-supported-usb-bluetooth-dongles" tabindex="-1">Is the solution meant to replace native supported USB Bluetooth Dongles <a class="header-anchor" href="#is-the-solution-meant-to-replace-native-supported-usb-bluetooth-dongles" aria-label="Permalink to &quot;Is the solution meant to replace native supported USB Bluetooth Dongles&quot;">​</a></h2><p>Not at all, Intel Bluetooth is only partly compatible with Apple&#39;s Drivers and has limited functionality.</p><p>Please consider an alternative solution like USB Dongles with BCM or CSR chips if Bluetooth is crucial for you.</p><h2 id="i-can-t-connect-to-device-xxx-but-it-s-successfully-discovered" tabindex="-1">I can&#39;t connect to device XXX but it&#39;s successfully discovered <a class="header-anchor" href="#i-can-t-connect-to-device-xxx-but-it-s-successfully-discovered" aria-label="Permalink to &quot;I can&#39;t connect to device XXX but it&#39;s successfully discovered&quot;">​</a></h2><p>Unfortunately, this is currently out of our control.</p><h2 id="can-intel-bluetooth-co-exist-with-other-bluetooth-devices" tabindex="-1">Can Intel Bluetooth co-exist with other Bluetooth Devices <a class="header-anchor" href="#can-intel-bluetooth-co-exist-with-other-bluetooth-devices" aria-label="Permalink to &quot;Can Intel Bluetooth co-exist with other Bluetooth Devices&quot;">​</a></h2><p>No.</p><h2 id="will-there-be-any-fixes-for-xxx-audio-format" tabindex="-1">Will there be any fixes for XXX audio format <a class="header-anchor" href="#will-there-be-any-fixes-for-xxx-audio-format" aria-label="Permalink to &quot;Will there be any fixes for XXX audio format&quot;">​</a></h2><p>No, it&#39;s out of our control.</p>',33)]))}const p=t(n,[["render",l]]);export{m as __pageData,p as default};
